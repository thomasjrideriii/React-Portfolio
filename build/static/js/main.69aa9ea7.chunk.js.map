{"version":3,"sources":["pages/About/assets/profile.jpg","components/Navbar/Navbar.js","components/NotFound/NotFound.js","pages/About/About.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","Menu","inverted","size","Container","Item","as","NavLink","to","active","position","Component","className","About","Grid","Row","Column","width","Card","Image","src","require","wrapped","ui","Content","Header","Meta","Description","Segment","App","Navbar","exact","path","component","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,qC,6KCyB5BC,E,uKAlBP,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,EAAMC,KAAK,WACvB,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,QAAM,GAArC,SAGA,kBAACR,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,YAA3B,WAGA,kBAACP,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,WAAWE,SAAS,SAA/C,iB,GAXKC,aCFV,oBACb,yBAAKC,UAAU,YACb,qCACA,6EACiD,kBAAC,IAAD,CAAMJ,GAAG,KAAT,cADjD,kC,oCC8CWK,E,uKA9CP,OACI,kBAACT,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,OAAN,CAAaC,MAAO,GAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,IAAKC,EAAQ,KACbC,SAAO,EACPC,IAAI,IAER,kBAACL,EAAA,EAAKM,QAAN,KACI,kBAACN,EAAA,EAAKO,OAAN,qBACA,kBAACP,EAAA,EAAKQ,KAAN,sBACA,kBAACR,EAAA,EAAKS,YAAN,8BAEI,6BAFJ,uBAQZ,kBAACb,EAAA,EAAKE,OAAN,CAAaC,MAAO,IAChB,kBAACW,EAAA,EAAD,idAOA,kBAACA,EAAA,EAAD,2d,GAhCRjB,a,OCmBLkB,MAdf,WACE,OACE,yBAAKjB,UAAU,OACT,kBAACkB,EAAD,MACA,yBAAKlB,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOoB,UAAWC,QCJZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69aa9ea7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.cdcfd5a4.jpg\";","import React, { Component } from \"react\";\nimport { Menu, Container } from \"semantic-ui-react\";\nimport { NavLink } from \"react-router-dom\";\n\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <Menu inverted={true} size=\"massive\">\n                <Container>\n                    <Menu.Item as={NavLink} to=\"/\" active>\n                        About\n                    </Menu.Item>\n                    <Menu.Item as={NavLink} to=\"/profile\">\n                        Profile\n                    </Menu.Item>\n                    <Menu.Item as={NavLink} to=\"/contact\" position=\"right\">\n                        Contact\n                    </Menu.Item>\n                </Container>\n            </Menu>\n        );\n    }\n}\n\nexport default Navigation;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <div className='NotFound'>\n    <h1>Oops!</h1>\n    <p>\n      Sorry, the page you requested cannot be found. <Link to='/'>Click\n      here</Link> to return to my About page.\n    </p>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport { Container, Grid, Card, Image, Segment } from \"semantic-ui-react\";\n\n\nclass About extends Component {\n    render() {\n        return (\n            <Container>\n                <Grid>\n                    <Grid.Row>\n                        <Grid.Column width={4}>\n                            <Card>\n                                <Image\n                                    src={require(\"./assets/profile.jpg\")}\n                                    wrapped\n                                    ui={false}\n                                />\n                                <Card.Content>\n                                    <Card.Header>Thomas Rider</Card.Header>\n                                    <Card.Meta>Charlotte, NC</Card.Meta>\n                                    <Card.Description>\n                                        Aspiring Web Developer \n                                        <br />\n                                        Avid Board Gamer\n                                    </Card.Description>\n                                </Card.Content>\n                            </Card>\n                        </Grid.Column>\n                        <Grid.Column width={12}>\n                            <Segment>My name is Thomas J Rider III, proudly named after my father and\n              grandfather, and born in the great state of New York! I've lived\n              most of my life in Charlotte, NC, and am a proud graduate of both\n              Charlotte Catholic High School and UNC Chapel Hill. I spent two\n              years in seminary post college, but ultimately decided that the\n              ministarial life wasn't for me, and came back to Charlotte to work\n              in theatre entertainment as a maintenance and facilities manager.</Segment>\n                            <Segment>In my free time, I spend a lot of time reading science fiction and\n              fantasy novels, playing board games and other table top games, and\n              generally nerding out about the latest Marvel or Star Wars film!\n              I'm always looking for something new to dig into, and web\n              development has been a great opportunity to unearth plenty of new\n              knowledge and skills. As an avid gamer, both on and off screen, I\n              look forward to an exciting career in coding and web app\n              development.</Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}\n\nexport default About;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\n\nimport Navbar from '../../components/Navbar/Navbar'\nimport NotFound from '../../components/NotFound/NotFound'\nimport About from '../../pages/About/About'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n          <Navbar />\n          <div className='container'>\n            <Switch>\n              <Route exact path='/' component={About} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}